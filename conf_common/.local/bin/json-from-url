#!/usr/bin/env yaegi

package main

import (
	"encoding/json"
	"io"
	"net/url"
	"os"
	"strings"
)

type out struct {
	Scheme   string     `json:"scheme,omitempty"`
	Username string     `json:"username,omitempty"`
	Password string     `json:"password,omitempty"`
	Host     string     `json:"host,omitempty"`
	Path     string     `json:"path,omitempty"`
	Opaque   string     `json:"opaque,omitempty"`
	Fragment string     `json:"fragment,omitempty"`
	Query    url.Values `json:"query,omitempty"`
}

func main() {
	var urlstr string
	if len(os.Args) > 1 {
		urlstr = os.Args[1]
	} else {
		urlb, _ := io.ReadAll(os.Stdin)
		urlstr = strings.TrimSpace(string(urlb))
	}

	url, err := url.Parse(urlstr)
	if err != nil {
		os.Exit(1)
	}

	var out out
	out.Query = url.Query()
	out.Scheme = url.Scheme
	out.Username = url.User.Username()
	out.Password, _ = url.User.Password()
	out.Opaque = url.Opaque
	out.Host = url.Host
	out.Path = url.Path
	out.Fragment = url.Fragment

	_ = json.NewEncoder(os.Stdout).Encode(out)
}
