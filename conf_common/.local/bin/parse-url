//usr/bin/env go-script "$0" "$@"; exit
// vi: ft=go

package main

import (
	"encoding/json"
	"io"
	"net/url"
	"os"
	"strings"
)

func main() {
	for _, urlStr := range urls() {
		url, err := url.Parse(urlStr)
		cerr(err)

		var out out
		out.Query = url.Query()
		out.Scheme = url.Scheme
		out.Username = url.User.Username()
		out.Password, _ = url.User.Password()
		out.Opaque = url.Opaque
		out.Host = url.Host
		out.Path = url.Path
		out.Fragment = url.Fragment

		err = json.NewEncoder(os.Stdout).Encode(out)
		cerr(err)
	}
}

func urls() []string {
	if len(os.Args) > 1 {
		return os.Args[1:]
	}

	stdin, _ := io.ReadAll(os.Stdin)
	stdinStr := strings.TrimSpace(string(stdin))
	return strings.Split(stdinStr, "\n")
}

type out struct {
	Scheme   string     `json:"scheme,omitempty"`
	Username string     `json:"username,omitempty"`
	Password string     `json:"password,omitempty"`
	Host     string     `json:"host,omitempty"`
	Path     string     `json:"path,omitempty"`
	Opaque   string     `json:"opaque,omitempty"`
	Fragment string     `json:"fragment,omitempty"`
	Query    url.Values `json:"query,omitempty"`
}

func cerr(err error) {
	if err != nil {
		panic(err)
	}
}
