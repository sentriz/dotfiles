#!/usr/bin/env python3

from datetime import datetime
from datetime import timedelta
from datetime import timezone
import dateutil.parser
import os
import sys
import re
import requests

BASE_URL = "https://opentimetable.dcu.ie/broker/api/categoryTypes/"
CATEGORY_TYPES = {
    "module": "d334dcdb-6362-408b-b3e2-4dcd061d5654",
    "programme": "241e4d36-60e0-49f8-b27e-99416745d98d",
    "location": "1e042cb1-547d-41d4-ae93-a1f2c3d34538",
}
PROGRAMME_TYPE_UUID = CATEGORY_TYPES["programme"]
AUTH_HEADERS = {"Authorization": "basic T64Mdy7m["}


def find_module_uuid(name):
    search_response = requests.post(
        BASE_URL + f"{PROGRAMME_TYPE_UUID}/categories/filter",
        headers=AUTH_HEADERS,
        params={"query": name},
    )
    search_results = search_response.json()["Results"]
    if len(search_results) == 0:
        return ""
    return search_results[0]["Identity"]


def find_next_module(module_id):
    now = datetime.now(tz=timezone.utc)
    day_of_week = now.weekday()
    midnight = now.replace(hour=0, minute=0, second=0, microsecond=0)
    start_of_week = midnight - timedelta(days=day_of_week)
    table_response = requests.post(
        BASE_URL + f"{PROGRAMME_TYPE_UUID}/categories/events/filter",
        json={
            "CategoryIdentities": [module_id],
            "ViewOptions": {
                "Days": [{"DayOfWeek": day_of_week + 1}],
                "Weeks": [{"FirstDayInWeek": start_of_week.isoformat()}],
            },
        },
        headers=AUTH_HEADERS,
    )
    response_obj = table_response.json()[0]
    modules = response_obj["CategoryEvents"]
    for module in sorted(modules, key=lambda m: m["StartDateTime"]):
        starts = dateutil.parser.parse(module["StartDateTime"])
        if now > starts:
            continue
        return starts, module


if __name__ == "__main__":
    if not "BLOCK_INSTANCE" in os.environ:
        print("please provide a BLOCK_INSTANCE", file=sys.stderr)
        sys.exit(1)
    module_id = find_module_uuid(os.environ["BLOCK_INSTANCE"])
    if not module_id:
        print("could not find that module", file=sys.stderr)
        sys.exit(1)
    starts, next_module = find_next_module(module_id)
    if not next_module:
        sys.exit(0)
    clean_name = re.sub(r"\[\d+\].*", "", next_module["Name"])
    clean_loc = re.sub(r"^GLA\.", "", next_module["Location"])
    clean_time = starts.strftime("%H:%M")
    print(f'{clean_name} {clean_time}/{clean_loc}')
