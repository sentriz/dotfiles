#!/usr/bin/python

import i3ipc
import signal
import sys
from functools import partial


def on_window_focus(inactive_opacity, ipc, event):
    global prev_focused
    global prev_workspace

    focused_workspace = ipc.get_tree().find_focused()
    if focused_workspace == None:
        return

    focused = event.container
    workspace = focused_workspace.workspace().num

    # https://github.com/swaywm/sway/issues/2859
    if focused.id == prev_focused.id:
        return

    focused.command("opacity 1")
    if workspace == prev_workspace:
        prev_focused.command(f"opacity {opacity}")

    prev_focused = focused
    prev_workspace = workspace


def remove_opacity(ipc):
    for workspace in ipc.get_tree().workspaces():
        for w in workspace:
            w.command("opacity 1")
    ipc.main_quit()
    sys.exit(0)


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("please provide an opacity value", file=sys.stderr)
        sys.exit(1)

    opacity = float(sys.argv[1])

    ipc = i3ipc.Connection()
    prev_focused = None
    prev_workspace = ipc.get_tree().find_focused().workspace().num

    for window in ipc.get_tree():
        if window.focused:
            prev_focused = window
        else:
            window.command(f"opacity {opacity}")

    for sig in [signal.SIGINT, signal.SIGTERM]:
        signal.signal(sig, lambda signal, frame: remove_opacity(ipc))

    ipc.on("window::focus", partial(on_window_focus, opacity))
    ipc.main()
